# Text answers from Week 0

# Name:Patrick Kennedy

Answers for Exercise #1:


Note that to call fdlt() the way it is implemented, we need to write `fdlt(bob, 20)`, for example. What would the function look like if we wanted to also pass in a parameter for the angle? 

if your passing in a parameter to the function then you'd want to define it so that there was a base value that would be overwritten by direct input. So something like:

def MoveBob(distance, angel = 90):

That way you will always have a base angle to work with regardless of entering in a value.


What would we have to do to be able to write `bob.fdlt(length, angle)`? (Hint: go back and take a look at how we define methods on the Turtle class in TurtleWorld.py)


define a function that pulls in those values that then calls the other two functions.

def fdlt(length, angle):
	fd(bob, length)
	lt(bob, angle)



Answers for the square through polyline items:

Explain what each of the following lines does. Use the terminology you learned from the book (or Google)
	
	from TurtleWorld import *
	world = TurtleWorld()
	bob = Turtle()
	wait_for_user()

Answer: They essentially bring in all the code that's sitting in the TurtleWorld file, then define a new drawing pad, create a new object (bob), then the pause and the end so that the window doesn't close.






These questions pertain to the program you wrote in Week0.

-- What are the arguments of polygon()?  What type is each argument?
Answer: well you need length and the number of sides. From that you can derive the degree to the left that Bob needs to turn.

-- What two turtle functions did you use to draw the sides of the polygon?
Answer: forward, fd(), and lt() 

-- What are the arguments for polyline?  What type is each argument?
Answer: Hmmmmmm the turtle (object), the number of sides (int) and the length (float) to move.


For some added understanding, answer the following in sib_answers.txt:
Why does theta need to be in units of degrees? So that the calculation as to how far Bob needs to move will cause him to move in a way that would make a circle and get all the way around, or in an arc. Otherwise you could just use slightly different formulation to get it to work.

What would you have to do in order to make arc(turtle=bob, r=10, theta=6.3) draw a complete circle (i.e. to make arc accept radians, instead of degrees)? Well you could just convert the radians to degrees within the function.


Suppose you wrote a function, center_circle(), that draws a circle of a given radius around the current location of the turtle and restores the turtle to its starting point.

-- What turtle functions would you use to move the turtle from the center to the edge of the circle and get ready to call the original circle() function?
Answer: I think you can just tell Bob to turn left using the lt() without a degree entered and then the radius in fd(). Since wherever Bob is he is always facing exactly parallel from that point and only needs the radius for the distance.

-- Suppose the interface of this function requires the turtle to end up in the same place it started, facing in the same direction it started.
Answer: ok, I'm with you so far.

-- What is this type of requirement called?
Answer: a postcondition